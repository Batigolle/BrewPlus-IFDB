/*
 
 *
 *  This file is part of BrewPlus.
 *
 *  BrewPlus is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  BrewPlus is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with BrewPlus; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package jmash;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import org.jdom.Document;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;


/**
 *
 * @author  Alessandro
 */
public class XmlEditor extends javax.swing.JInternalFrame {
    /**
     *
     */
    private static final long serialVersionUID = -6911597917266981545L;
    
    JTextPane txt2 = new JTextPane();
    
    int which=1;
    boolean dirty=false;
    /** Creates new form XmlEditor */
    String file;
    public XmlEditor(String file) {
	this.file=file;
	initComponents();
	setBorder(Utils.getDefaultBorder());
	JScrollPane pane=new JScrollPane();
	pane.getViewport().add(this.txt2);
	getContentPane().add(pane, java.awt.BorderLayout.CENTER);
	this.txt2.requestFocus();
	setTitle(getTitle()+ " - "+file );
	
	readFile(file);
	
	
	//  Set alignment to be centered for all paragraphs
	
	
	this.txt2.addKeyListener(new KeyListener(){
            @Override
	    public void keyPressed(KeyEvent ev){
	    }
            @Override
	    public void keyReleased(KeyEvent ev){
	    }
            @Override
	    public void keyTyped(KeyEvent ev){
		XmlEditor.this.dirty=true;
	    }
	});
	
    }
    
    public XmlEditor(Document doc) {
	initComponents();
	
	JScrollPane pane=new JScrollPane();
	pane.getViewport().add(this.txt2);
	getContentPane().add(pane, java.awt.BorderLayout.CENTER);
	this.txt2.requestFocus();
	
	XMLOutputter outputter = new XMLOutputter(Format.getPrettyFormat());
	
	String xml=outputter.outputString(doc);
	
	this.txt2.setText(xml);
	
	
	this.txt2.addKeyListener(new KeyListener(){
            @Override
	    public void keyPressed(KeyEvent ev){
	    }
            @Override
	    public void keyReleased(KeyEvent ev){
	    }
            @Override
	    public void keyTyped(KeyEvent ev){
		XmlEditor.this.dirty=true;
	    }
	});
	
    }
    
    public void readFile(String file){
	this.file=file;
	BufferedReader reader=null;
	try{
	    reader = new BufferedReader(new FileReader(new File(file)));
	} catch(java.io.FileNotFoundException ex){
	    ex.printStackTrace();
	}
	
	try {
	    
	    String record =  "";
	    String str;
	    while ( (str = reader.readLine()) != null ) {
		record+=(str+ "\n");
	    }
	    this.txt2.setText(record);
	    reader.close();
	} catch (IOException e) {
	    e.printStackTrace();
	}
	this.txt2.setCaretPosition(0);
	
    }
    
    public void saveFile(){
	try{
	    FileWriter out = new FileWriter(new File(this.file));
	    String text=this.txt2.getText();
	    out.write(text);
	    out.close();
	} catch (IOException e) {
	    e.printStackTrace();
	}
	try {
	    Main.readLuppoli();
	    Main.readMalti();
	    Main.readStili();
	    Main.readLieviti();
	} catch (Exception ex) {
	    Utils.showException(ex,"",this);
	}
	this.dirty=false;
	Utils.showMsg("Salvataggio eseguito con successo",this);	
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        this.toolbar = new javax.swing.JToolBar();
        this.btnSave = new javax.swing.JButton();
        this.btnClose = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("XML Configuration Editor");
        this.toolbar.setFloatable(false);
        this.btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jmash/images/filesave.png")));
        this.btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        this.toolbar.add(this.btnSave);

        this.btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jmash/images/fileclose.png")));
        this.btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        this.toolbar.add(this.btnClose);

        getContentPane().add(this.toolbar, java.awt.BorderLayout.NORTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-640)/2, (screenSize.height-400)/2, 640, 400);
    }
    // </editor-fold>//GEN-END:initComponents
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
	
	doDefaultCloseAction();
    }//GEN-LAST:event_btnCloseActionPerformed
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
	saveFile();
    }//GEN-LAST:event_btnSaveActionPerformed
    
    @Override
    public void doDefaultCloseAction(){
	if(this.dirty){
	    if(!Ask.doAsk(this,"Il file è stato modificato, chiudere senza salvare le modifiche?")){
		return;
	    }
	}
	
	super.doDefaultCloseAction();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnSave;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
    
}
